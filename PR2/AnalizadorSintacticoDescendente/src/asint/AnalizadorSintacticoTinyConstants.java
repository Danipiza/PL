/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyConstants.java */
package asint;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorSintacticoTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoPositivo = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int parteEntera = 4;
  /** RegularExpression Id. */
  int parteDecimal = 5;
  /** RegularExpression Id. */
  int parteExponencial = 6;
  /** RegularExpression Id. */
  int TRUE = 9;
  /** RegularExpression Id. */
  int FALSE = 10;
  /** RegularExpression Id. */
  int and = 11;
  /** RegularExpression Id. */
  int or = 12;
  /** RegularExpression Id. */
  int not = 13;
  /** RegularExpression Id. */
  int bool = 14;
  /** RegularExpression Id. */
  int real = 15;
  /** RegularExpression Id. */
  int INT = 16;
  /** RegularExpression Id. */
  int string = 17;
  /** RegularExpression Id. */
  int NULL = 18;
  /** RegularExpression Id. */
  int proc = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int struct = 23;
  /** RegularExpression Id. */
  int NEW = 24;
  /** RegularExpression Id. */
  int delete = 25;
  /** RegularExpression Id. */
  int read = 26;
  /** RegularExpression Id. */
  int write = 27;
  /** RegularExpression Id. */
  int nl = 28;
  /** RegularExpression Id. */
  int type = 29;
  /** RegularExpression Id. */
  int call = 30;
  /** RegularExpression Id. */
  int identificador = 31;
  /** RegularExpression Id. */
  int literalEntero = 32;
  /** RegularExpression Id. */
  int literalReal = 33;
  /** RegularExpression Id. */
  int literalCadena = 34;
  /** RegularExpression Id. */
  int suma = 35;
  /** RegularExpression Id. */
  int resta = 36;
  /** RegularExpression Id. */
  int mul = 37;
  /** RegularExpression Id. */
  int div = 38;
  /** RegularExpression Id. */
  int mayor = 39;
  /** RegularExpression Id. */
  int mayorIgual = 40;
  /** RegularExpression Id. */
  int menor = 41;
  /** RegularExpression Id. */
  int menorIgual = 42;
  /** RegularExpression Id. */
  int igual = 43;
  /** RegularExpression Id. */
  int distinto = 44;
  /** RegularExpression Id. */
  int asignar = 45;
  /** RegularExpression Id. */
  int puntoycoma = 46;
  /** RegularExpression Id. */
  int parentesisApertura = 47;
  /** RegularExpression Id. */
  int parentesisCierre = 48;
  /** RegularExpression Id. */
  int llaveApertura = 49;
  /** RegularExpression Id. */
  int llaveCierre = 50;
  /** RegularExpression Id. */
  int eval = 51;
  /** RegularExpression Id. */
  int modulo = 52;
  /** RegularExpression Id. */
  int corcheteApertura = 53;
  /** RegularExpression Id. */
  int corcheteCierre = 54;
  /** RegularExpression Id. */
  int punto = 55;
  /** RegularExpression Id. */
  int coma = 56;
  /** RegularExpression Id. */
  int circunflejo = 57;
  /** RegularExpression Id. */
  int ampersand = 58;
  /** RegularExpression Id. */
  int separador = 59;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<parteEntera>",
    "<parteDecimal>",
    "<parteExponencial>",
    "<token of kind 7>",
    "<token of kind 8>",
    "\"true\"",
    "\"false\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"bool\"",
    "\"real\"",
    "\"int\"",
    "\"string\"",
    "\"null\"",
    "\"proc\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"struct\"",
    "\"new\"",
    "\"delete\"",
    "\"read\"",
    "\"write\"",
    "\"nl\"",
    "\"type\"",
    "\"call\"",
    "<identificador>",
    "<literalEntero>",
    "<literalReal>",
    "<literalCadena>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"=\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"@\"",
    "\"%\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\",\"",
    "\"^\"",
    "\"&\"",
    "\"&&\"",
  };

}
