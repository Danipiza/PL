
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaEval;
import asint.SintaxisAbstractaEval.Exp;
import asint.SintaxisAbstractaEval.Decs;
import asint.SintaxisAbstractaEval.LDecs;
import asint.SintaxisAbstractaEval.Dec;
import asint.SintaxisAbstractaEval.Prog;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ConstructorASTEval extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ConstructorASTEval() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ConstructorASTEval(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTEval(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\007\004\000\002\007\002\000\002\010\005" +
    "\000\002\010\003\000\002\011\005\000\002\004\005\000" +
    "\002\004\003\000\002\005\005\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\005\000\002\012\003\000\002\012\003\000\002\013\003" +
    "\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\004\005\005\001\002\000\004\002\041\001" +
    "\002\000\012\014\021\016\024\017\022\020\023\001\002" +
    "\000\006\002\ufffd\004\010\001\002\000\004\002\001\001" +
    "\002\000\004\016\012\001\002\000\006\002\ufffb\013\ufffb" +
    "\001\002\000\004\012\016\001\002\000\006\002\ufffe\013" +
    "\014\001\002\000\004\016\012\001\002\000\006\002\ufffc" +
    "\013\ufffc\001\002\000\012\014\021\016\024\017\022\020" +
    "\023\001\002\000\022\002\ufff8\004\ufff8\006\ufff8\007\ufff8" +
    "\010\036\011\035\013\ufff8\015\ufff8\001\002\000\012\002" +
    "\ufffa\006\030\007\032\013\ufffa\001\002\000\012\014\021" +
    "\016\024\017\022\020\023\001\002\000\022\002\ufff4\004" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\015\ufff4" +
    "\001\002\000\022\002\ufff3\004\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\013\ufff3\015\ufff3\001\002\000\022\002\ufff5" +
    "\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\015" +
    "\ufff5\001\002\000\022\002\ufff6\004\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\013\ufff6\015\ufff6\001\002\000\010\006" +
    "\030\007\032\015\027\001\002\000\022\002\ufff2\004\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\015\ufff2\001" +
    "\002\000\012\014\ufff1\016\ufff1\017\ufff1\020\ufff1\001\002" +
    "\000\012\014\021\016\024\017\022\020\023\001\002\000" +
    "\012\014\ufff0\016\ufff0\017\ufff0\020\ufff0\001\002\000\022" +
    "\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\036\011\035\013" +
    "\ufff9\015\ufff9\001\002\000\012\014\021\016\024\017\022" +
    "\020\023\001\002\000\012\014\uffee\016\uffee\017\uffee\020" +
    "\uffee\001\002\000\012\014\uffef\016\uffef\017\uffef\020\uffef" +
    "\001\002\000\022\002\ufff7\004\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\013\ufff7\015\ufff7\001\002\000\012\002\uffff" +
    "\004\uffff\006\030\007\032\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\010\004\037\005\016\006\024\001\001\000\004" +
    "\007\006\001\001\000\002\001\001\000\006\010\012\011" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\014\001\001\000\002\001\001\000" +
    "\010\004\017\005\016\006\024\001\001\000\004\013\033" +
    "\001\001\000\004\012\030\001\001\000\010\004\025\005" +
    "\016\006\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\032" +
    "\006\024\001\001\000\002\001\001\000\004\013\033\001" +
    "\001\000\004\006\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\030\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTEval$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTEval$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTEval$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresEval();
   AnalizadorLexicoEval alex = (AnalizadorLexicoEval)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresEval errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ConstructorASTEval$actions {


  ClaseSemanticaEval sem = new ClaseSemanticaEval();

  private final ConstructorASTEval parser;

  /** Constructor */
  CUP$ConstructorASTEval$actions(ConstructorASTEval parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTEval$do_action_part00000000(
    int                        CUP$ConstructorASTEval$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTEval$parser,
    java.util.Stack            CUP$ConstructorASTEval$stack,
    int                        CUP$ConstructorASTEval$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTEval$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTEval$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= expresion declaraciones 
            {
              Prog RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = sem.prog(exp,decs); 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTEval$parser.done_parsing();
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresion ::= EVALUA E0 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= DONDE lista_declaraciones 
            {
              Decs RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = sem.si_decs(decs); 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("declaraciones",5, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("declaraciones",5, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones COMA declaracion 
            {
              LDecs RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).right;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = sem.muchas_decs(decs,dec);
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",6, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = sem.una_dec(dec);
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",6, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= IDEN IGUAL E0 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = (Dec)sem.dec(id.str(),exp).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E0 ::= E0 OP0 E1 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = sem.mkop(op,opnd1,opnd2); 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("E0",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E0 ::= E1 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("E0",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = sem.mkop(op,opnd1,opnd2); 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("E1",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E1 ::= E2 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("E1",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E2 ::= IDEN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = (Exp)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("E2",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E2 ::= ENT 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = (Exp)sem.lit_ent(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("E2",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E2 ::= REAL 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()).right;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.peek()).value;
		 RESULT = (Exp)sem.lit_real(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("E2",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E2 ::= PAP E0 PCIERRE 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("E2",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.elementAt(CUP$ConstructorASTEval$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OP0 ::= MAS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("OP0",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OP0 ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("OP0",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OP1 ::= POR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("OP1",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OP1 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorASTEval$result = parser.getSymbolFactory().newSymbol("OP1",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTEval$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTEval$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTEval$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTEval$do_action(
    int                        CUP$ConstructorASTEval$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTEval$parser,
    java.util.Stack            CUP$ConstructorASTEval$stack,
    int                        CUP$ConstructorASTEval$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTEval$do_action_part00000000(
                               CUP$ConstructorASTEval$act_num,
                               CUP$ConstructorASTEval$parser,
                               CUP$ConstructorASTEval$stack,
                               CUP$ConstructorASTEval$top);
    }
}

}
