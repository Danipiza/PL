options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(ConstructorASTsTiny)
package c_ast_descendente;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;

public class ConstructorASTsTiny {
   private ClaseSemanticaTiny sem = new ClaseSemanticaTiny();   
}
PARSER_END(ConstructorASTsTiny)

  TOKEN:{<#letra:["a"-"z","A"-"Z","_"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
  TOKEN:{<#parteExponencial: ("E"|"e")(["+","-"])?(<parteEntera>)>}
  
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>} 
  
  TOKEN: {<TRUE:"true">}
  TOKEN: {<FALSE:"false">}
  TOKEN: {<and:"and">}
  TOKEN: {<or:"or">}
  TOKEN: {<not:"not">}
  TOKEN: {<bool:"bool">}
  TOKEN: {<real:"real">}
  TOKEN: {<INT:"int">}
  TOKEN: {<string:"string">}
  TOKEN: {<NULL:"null">}
  TOKEN: {<proc:"proc">}
  TOKEN: {<IF:"if">}
  TOKEN: {<ELSE:"else">}
  TOKEN: {<WHILE:"while">}
  TOKEN: {<struct:"struct">}
  TOKEN: {<NEW:"new">}
  TOKEN: {<delete:"delete">}
  TOKEN: {<read:"read">}
  TOKEN: {<write:"write">}
  TOKEN: {<nl:"nl">}
  TOKEN: {<type:"type">}
  TOKEN: {<call:"call">}
  
  
  
  TOKEN:{<identificador:<letra>(<letra>|<digito>)*>}
  TOKEN:{<literalEntero:(["+","-"])?<parteEntera>>}
  TOKEN:{<literalReal:<literalEntero>(<parteExponencial>|("."<parteDecimal>)|("."<parteDecimal><parteExponencial>))>}
  TOKEN:{<literalCadena:"\"" (~["\""])* "\"">}
  TOKEN:{<suma:"+">}
  TOKEN:{<resta:"-">}
  TOKEN:{<mul:"*">}
  TOKEN:{<div:"/">}
  TOKEN:{<mayor:">">}
  TOKEN:{<mayorIgual:">=">}
  TOKEN:{<menor:"<">}
  TOKEN:{<menorIgual:"<=">}
  TOKEN:{<igual:"==">}
  TOKEN:{<distinto:"!=">}
  TOKEN:{<asignar:"=">}
  TOKEN:{<puntoycoma:";">}
  TOKEN:{<parentesisApertura:"(">}
  TOKEN:{<parentesisCierre:")">}
  TOKEN:{<llaveApertura:"{">}
  TOKEN:{<llaveCierre:"}">}
  TOKEN:{<eval:"@">}
  TOKEN:{<modulo:"%">}
  TOKEN:{<corcheteApertura:"[">}
  TOKEN:{<corcheteCierre:"]">}
  TOKEN:{<punto:".">}
  TOKEN:{<coma:",">}
  TOKEN:{<circunflejo:"^">}
  TOKEN:{<ampersand:"&">}
  TOKEN:{<separador:"&&">}
  
 

Prog programa()  : 
{Bloq bloq;}
{ 
	bloq = bloque() <EOF>
	{return sem.prog(bloq);}
}


Bloq bloque()  :
{DecsOp decsOp; InstrsOp instrsOp ;}
{ 
<llaveApertura> decsOp = declaraciones_opt() instrsOp = instrucciones_opt() <llaveCierre> 
{return sem.bloq(decsOp, instrsOp);}
}

DecsOp declaraciones_opt()  :
{Decs decs;}
{  
	decs = declaraciones() <separador>
	{return sem.si_decs(decs);} 
|	
	{return sem.no_decs();}  
}

InstrsOp instrucciones_opt()  : 
{Instrs instrs;} 
{  
	//instrs = instrucciones() 
	//{return sem.si_instrs(instrs);}
//|
	{return sem.no_instrs();}
}




Decs declaraciones()  : 
{Decs decs; Dec dec; } 
{
	dec = declaracion() decs = DR(sem.una_dec(dec))
	{return decs;} 
}


Decs DR(Decs dech)  : 
{Dec dec; Decs decs;} 
{
  	dec = declaracion() decs = DR(sem.muchas_decs(dech,dec))
	{return decs;}
| 
	{return dech;}
}
 

// TODO DEMAS
Dec declaracion()  : 
{Tipo tipo; Token id; ParsFOp parsFOp; Bloq bloq;}
{
	tipo = tipo1() id = <identificador>
	{return (Dec)sem.dec_variable(tipo,id.image).ponFila(id.beginLine).ponCol(id.beginColumn);} 
/*|
	"type" tipo = tipo1() id = <identificador>
	{return (Dec)sem.dec_tipo(tipo,id.image);}
| 
	"proc" id = <identificador> "(" parsFOp = parametrosFormales_opt() ")"
	bloq = bloque()
	{return (Dec)sem.dec_proc(id.image,parsFOp,bloq);} */
}




Tipo tipo1()  : 
{Tipo t2, rt1;} 
{ 	
	t2 = tipo2() rt1 = rtipo1(t2) 
	{return rt1;}
}



Tipo rtipo1(Tipo th)  : 
{Token t; Tipo t1;} 
{ 	
	<corcheteApertura> t = <literalEntero> <corcheteCierre> t1 = rtipo1(th) 
	{return sem.tipo_lista(th,t);} 
|
	{return th;} 
}



Tipo tipo2()  : 
{Tipo t;} 
{	
	<circunflejo> t = tipo2() 
	{return sem.tipo_circum(t);}

//| 
	//<struct> t= tipo3()
	//{return sem.tipo_struct(t);}
	//{return t;}
|
	t = tipo3()
	{return t;}
}


// TODO CAMPOS
Tipo tipo3()  : 
{Tipo t; Campos c; Token id; } 
{ 	
	t = tipoBasico() 
	{return t;} 
//| 
	//<struct> <llaveApertura> c = Campos() <llaveCierre>
	//{return sem.tipo_struct(c);} 
//| 
	//id = <identificador>
	//{return sem.tipo_iden(id);} 
}



Tipo tipoBasico()  : 
{Token t;} 
{
	t = <INT> 
	// {return sem.int(t);}
	{return (Tipo)sem.lit_ent(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
|  
	t = <real> 
	//{return sem.real(t);}
	{return (Tipo)sem.lit_real(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
| 
	t = <bool> 
	// {return sem.bool(t);}
	{return (Tipo)sem.lit_bool(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
| 
	t =<string>
	// {return sem.string(t);}
	{return (Tipo)sem.lit_cadena(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
}